<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active_hover = noone;
secondary_hover = noone;
selected_anchor = noone;
press_loc_x = 0;
press_loc_y = 0;
pressed = false;

prev_selected_anchor = noone;
selected_anchor_to_remove = noone;

draw_grid = true;

x = 1366;
y = o_ground.y - 400;

initial_x = x;
initial_y = y;

active_material = ELT_IRON;
budget = 1000000;

STATE = STATE_EDIT_MODE;
DEBUG = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties and Constants

// DEFINING PROPERTIES
properties[ELT_IRON, PROP_COST] = 19.8;
properties[ELT_IRON, PROP_HINGE_STRENGTH] = 7;
properties[ELT_IRON, PROP_MATERIAL_STRENGTH] = 4;
properties[ELT_IRON, PROP_DENSITY] = 100;
properties[ELT_IRON, PROP_DAMPING] = 1.5;
properties[ELT_IRON, PROP_HEALTH] = 0;
properties[ELT_IRON, PROP_HINGE_ELASTICITY] = 5;
properties[ELT_IRON, PROP_NAME] = "Iron";

properties[ELT_WOOD, PROP_COST] = 6.82;
properties[ELT_WOOD, PROP_HINGE_STRENGTH] = 1;
properties[ELT_WOOD, PROP_MATERIAL_STRENGTH] = 0.5;
properties[ELT_WOOD, PROP_DENSITY] = 8.1;
properties[ELT_WOOD, PROP_DAMPING] = 0.2;
properties[ELT_WOOD, PROP_HEALTH] = 0;
properties[ELT_WOOD, PROP_HINGE_ELASTICITY] = 5;
properties[ELT_WOOD, PROP_NAME] = "Wood";

properties[ELT_STEEL, PROP_COST] = 25.67;
properties[ELT_STEEL, PROP_HINGE_STRENGTH] = 10;
properties[ELT_STEEL, PROP_MATERIAL_STRENGTH] = 7;
properties[ELT_STEEL, PROP_DENSITY] = 98;
properties[ELT_STEEL, PROP_DAMPING] = 2;
properties[ELT_STEEL, PROP_HEALTH] = 3;
properties[ELT_STEEL, PROP_HINGE_ELASTICITY] = 8;
properties[ELT_STEEL, PROP_NAME] = "Steel";

properties[ELT_ALUMINIUM, PROP_COST] = 54.2;
properties[ELT_ALUMINIUM, PROP_HINGE_STRENGTH] = 15;
properties[ELT_ALUMINIUM, PROP_MATERIAL_STRENGTH] = 10;
properties[ELT_ALUMINIUM, PROP_DENSITY] = 34;
properties[ELT_ALUMINIUM, PROP_DAMPING] = 2;
properties[ELT_ALUMINIUM, PROP_HEALTH] = 4;
properties[ELT_ALUMINIUM, PROP_HINGE_ELASTICITY] = 10;
properties[ELT_ALUMINIUM, PROP_NAME] = "Aluminium";

properties[ELT_TITANIUM, PROP_COST] = 88.39;
properties[ELT_TITANIUM, PROP_HINGE_STRENGTH] = 30;
properties[ELT_TITANIUM, PROP_MATERIAL_STRENGTH] = 25;
properties[ELT_TITANIUM, PROP_DENSITY] = 57;
properties[ELT_TITANIUM, PROP_DAMPING] = 3;
properties[ELT_TITANIUM, PROP_HEALTH] = 6;
properties[ELT_TITANIUM, PROP_HINGE_ELASTICITY] = 12;
properties[ELT_TITANIUM, PROP_NAME] = "Titanium";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// App bar

// APP BAR ICONS
appbar[0] = -1;
appbar[1] = -1;
appbar[2] = -1;
appbar[3] = -1;
appbar[4] = -1;
n_appbar = 5;

if (os_type == os_win8native) {
  win8_appbar_enable(true);
  //appbar[0] = win8_appbar_add_element("button", "allapps", "Material", "global", "Change the current building material", show_materials_menu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Panning
if (active_hover == noone) {
  if mouse_check_button_pressed(mb_left)
  {
    MouseStartX = window_mouse_get_x();
    MouseStartY = window_mouse_get_y();
  }
  if mouse_check_button(mb_left) 
  {
    MouseNewX = window_mouse_get_x();
    MouseNewY = window_mouse_get_y();
    x += MouseStartX - MouseNewX;
    y += MouseStartY - MouseNewY;
    MouseStartX = MouseNewX;
    MouseStartY = MouseNewY;
    
    x = max(x, view_hborder[0]);
    x = min(x, room_width - view_hborder[0]);
    y = max(y, view_vborder[0]);
    y = min(y, room_height - view_vborder[0]);
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// App bar
if (os_type == os_win8native) {
  if (selected_anchor != prev_selected_anchor) {

    if (selected_anchor == noone) {
      clear_app_bar();    
    } else {
      if (prev_selected_anchor != noone) {
        clear_app_bar();
      }

      // Add actions
      if (selected_anchor.type == ANCHOR_MOBILE) { // only mobile anchors can be deleted
        appbar[1] = win8_appbar_add_element("button", "delete", "Delete Anchor", "selection", "Delete the selected anchor element", delete_selected_anchor);
      }

    }

    //appbar[0] = win8_appbar_add_element("button", "allapps", "Material", "global", "Change the current building material", show_materials_menu);

  }
  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selection management
prev_selected_anchor = selected_anchor;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (de)selection management
if (mouse_check_button_released(mb_any)) {
  selected_anchor = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fancy physics

if (keyboard_check(ord('W'))) {
  with ( o_connection ) {
    phy_speed_x += 0.03;
  }
}

if (keyboard_check_released(ord('E'))) {
  with ( o_ground ) {
    physics_apply_impulse(x-500 + random(1000), y, 2, -400000);
  }
}

if (keyboard_check_released(ord('B'))) {
  instance_create(mouse_x, mouse_y, o_happybird);
}

if (keyboard_check_released(ord('1'))) {
  active_material = ELT_WOOD;
}

if (keyboard_check_released(ord('2'))) {
  active_material = ELT_IRON;
}

if (keyboard_check_released(ord('3'))) {
  active_material = ELT_STEEL;
}

if (keyboard_check_released(ord('4'))) {
  active_material = ELT_ALUMINIUM;
}

if (keyboard_check_released(ord('5'))) {
  active_material = ELT_TITANIUM;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active_hover != noone) {

  can_create = true;
  
  x1 = active_hover.x;
  y1 = active_hover.y;
  
  if (secondary_hover == noone ) {
    x2 = round ( mouse_x / 32 ) * 32;
    y2 = round ( mouse_y / 32 ) * 32;
    
    i = instance_nearest(x2, y2, o_anchor);
    
  } else {
    x2 = secondary_hover.x;
    y2 = secondary_hover.y;
    
    // make sure we are not already connected!
    if (secondary_hover == active_hover) can_create = false;
    
    if (can_create) {
      with (o_connection) {
        if ( (anchor_with == o_controller.active_hover &amp;&amp; end_anchor == o_controller.secondary_hover) ||
             (end_anchor == o_controller.active_hover &amp;&amp; anchor_with == o_controller.secondary_hover) ) {
          o_controller.can_create = false;
        }
      }
    }
  }
  
  if (round(x1) == round(x2) &amp;&amp; round(y1) == round(y2)) can_create = false;

  if (can_create) {
    x_loc = (x1 + x2) / 2;
    y_loc = (y1 + y2) / 2;
    
    obj = instance_create(x_loc, y_loc, o_connection);
    obj.length = point_distance(x1, y1, x2, y2);
    obj.initial_angle = point_direction(x1, y2, x2, y1);
    obj.anchor_with = active_hover;
    obj.anchor_at_x = x1;
    obj.anchor_at_y = y1;
    obj.end_anchor_x = x2;
    obj.end_anchor_y = y2;
    obj.end_anchor = secondary_hover;
    obj.density = properties[active_material, PROP_DENSITY];
    obj.damping = properties[active_material, PROP_DAMPING];
    obj.hinge_strength = properties[active_material, PROP_HINGE_STRENGTH];
    obj.material_strength = properties[active_material, PROP_MATERIAL_STRENGTH];
    obj.hp = properties[active_material, PROP_HEALTH];
    obj.max_displacement = properties[active_material, PROP_HINGE_ELASTICITY];

    budget -= properties[active_material, PROP_COST] * obj.length;
  }
}

active_hover = noone;
secondary_hover = noone;

pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active_hover != noone) {
  press_loc_x = active_hover.x;
  press_loc_y = active_hover.y;
} else {
  press_loc_x = mouse_x;
  press_loc_y = mouse_y;
  initial_x = x;
  initial_y = y;
}

pressed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>resize_window</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="65">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>resize_window</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_font(f_hud);

draw_set_color(c_dkgray);
draw_roundrect_ext(5, 5, display_get_gui_width() - 5, 128, 18, 18, false);

draw_set_color(c_white);

// Remaining Budget
draw_set_valign(fa_middle);
draw_sprite_stretched(ico_dollar, 0, 30 - 12, 30 - 12, 24, 24);
draw_text(30 + 20, 30, "$" + string(budget) );

// Current Material
draw_text(30 + 20, 50, "Current material: " + properties[active_material, PROP_NAME]);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button(mb_left)) {
  
  if (active_hover != noone) {
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_line_width(press_loc_x, press_loc_y, round(mouse_x/32)*32, round(mouse_y/32)*32, 4);
    draw_set_alpha(1);
    draw_circle(active_hover.x, active_hover.y, 12, true);
    draw_set_color(c_white);
    draw_circle(round(mouse_x/32)*32, round(mouse_y/32)*32, 8, false);
  }
}

if (selected_anchor != noone) {
  draw_set_color(c_blue);
  draw_circle(selected_anchor.x, selected_anchor.y, 20, true);
  draw_set_color(c_black);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw grid
if (draw_grid) {

draw_set_alpha(0.3);
draw_set_color(c_gray);

spacing = 32;
h = room_height; //view_hview[0];
w = room_width; //view_wview[0];

n_rows = ceil(h/spacing);
n_cols = ceil(w/spacing);

for (i = 0; i &lt; n_rows; i++) {

  if (i % 4 == 0) {
    draw_set_alpha(0.5);
    draw_line_width(0, 32 * i, w, 32*i, 5);
    draw_set_alpha(0.3);
  } else {
    draw_line_width(0, 32 * i, w, 32*i, 3);
  }

}

for (i = 0; i &lt; n_cols; i++) {

  if (i % 4 == 0) {
    draw_set_alpha(0.5);
    draw_line_width(32 * i, 0, 32*i, h, 5);
    draw_set_alpha(0.3);
  } else {
    draw_line_width(32 * i, 0, 32*i, h, 3);
  }
}

draw_set_alpha(1);
draw_set_color(c_black);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(o_state_affected_object)
{
  phy_active = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
