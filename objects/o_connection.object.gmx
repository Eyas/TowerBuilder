<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>o_state_affected_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>length = 64;
thickness = 2;
initial_angle = 90;
anchor_with = noone;
anchor_at_x = 0;
anchor_at_y = 0;
end_anchor_x = length;
end_anchor_y = 0;
end_anchor = noone;
start_connect = noone;
end_connect = noone;

density = 100;
damping = 1;
hinge_strength = 7;
material_strength = 4;
hp = 0;
max_joint_displacement = 5;
damaged = false;

start_joint = -1;
end_joint = -1;

start_connector = -1;
end_connector = -1;

start_jforce_x = -1;
start_jforce_y = -1;
end_jforce_x = -1;
end_jforce_y = -1;

start_cforce_x = -1;
start_cforce_y = -1;
end_cforce_x = -1;
end_cforce_y = -1;

start_jforce = 0;
end_jforce = 0;
start_cforce = 0;
end_cforce = 0;

start_force = 0;
end_force = 0;

alarm[0] = 1;
draw = false;

// do not perform event_inherited() here
// since we do not instantiate the fixture here.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (anchor_with) anchor_with.connections -= 1;
if (end_anchor) end_anchor.connections -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damaged = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>body = physics_fixture_create();
physics_fixture_set_box_shape(body, length/2, thickness/2);
physics_fixture_set_density(body, density);
physics_fixture_set_linear_damping(body, damping);

physics_fixture_bind(body, self);
physics_fixture_delete(body);

phy_rotation = initial_angle;

start_connect = instance_create(anchor_with.x, anchor_with.y, o_with_anchor);
start_connect.my_anchor = anchor_with;
start_connect.density = density;
with(start_connect) {
    fixture = physics_fixture_create();
    physics_fixture_set_circle_shape(fixture, radius);
    physics_fixture_set_density(fixture, density);
    physics_fixture_set_angular_damping(fixture, angular);
    physics_fixture_bind(fixture, self);
    physics_fixture_delete(fixture);
    phy_active = false;
}

start_connector = physics_joint_prismatic_create(start_connect, anchor_with, anchor_at_x, anchor_at_y, 0 /* world_axis_y */, 1 /* world_axis_y */, -0.5, 0.5, true, 0, 0, false, false);

start_joint = physics_joint_revolute_create(start_connect, id, anchor_at_x, anchor_at_y, 0, 0, false, 0, 0, false, false);

if (end_anchor == noone) {
  end_anchor = instance_create(end_anchor_x, end_anchor_y, o_anchor);
  end_anchor.density = max(1, density/3.3);
  end_anchor.damping = damping * 3;

  with(end_anchor) {
    fixture = physics_fixture_create();
    physics_fixture_set_circle_shape(fixture, radius);
    physics_fixture_set_linear_damping(fixture, damping);
    physics_fixture_set_density(fixture, density);
    physics_fixture_set_angular_damping(fixture, angular);
    physics_fixture_bind(fixture, self);
    physics_fixture_delete(fixture);

    phy_active = false;
  }
}

end_connect = instance_create(end_anchor.x, end_anchor.y,  o_with_anchor);
end_connect.my_anchor = end_anchor;
end_connect.density = density;
with(end_connect) {
    fixture = physics_fixture_create();
    physics_fixture_set_circle_shape(fixture, radius);
    physics_fixture_set_density(fixture, density);
    physics_fixture_set_angular_damping(fixture, angular);
    physics_fixture_bind(fixture, self);
    physics_fixture_delete(fixture);
    phy_active = false;
}

end_connector = physics_joint_prismatic_create(end_connect, end_anchor, end_anchor_x, end_anchor_y, 0 /* world_axis_y */, 1 /* world_axis_y */, -0.5, 0.5, true, 0, 0, false, false);


end_joint = physics_joint_revolute_create(end_connect, id, end_anchor_x, end_anchor_y, 0, 0, false, 0, 0, false, false);

anchor_with.connections += 1;
end_anchor.connections += 1;

phy_active = false;
draw = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_force = 0;
end_force = 0;

if (start_joint) {
  start_jforce_x = physics_joint_get_value(start_joint, phy_joint_reaction_force_x);
  start_jforce_y = physics_joint_get_value(start_joint, phy_joint_reaction_force_y);

  start_jforce = point_distance(0, 0, start_jforce_x, start_jforce_y);
}
if (end_joint) {
  end_jforce_x = physics_joint_get_value(end_joint, phy_joint_reaction_force_x);
  end_jforce_y = physics_joint_get_value(end_joint, phy_joint_reaction_force_y);
  
  end_jforce = point_distance(0, 0, end_jforce_x, end_jforce_y);
}

if (start_connector) {
  start_cforce_x = physics_joint_get_value(start_connector, phy_joint_reaction_force_x);
  start_cforce_y = physics_joint_get_value(start_connector, phy_joint_reaction_force_y);

  start_cforce = point_distance(0, 0, start_cforce_x, start_cforce_y);
}
if (end_connector) {
  end_cforce_x = physics_joint_get_value(end_connector, phy_joint_reaction_force_x);
  end_cforce_y = physics_joint_get_value(end_connector, phy_joint_reaction_force_y);
  
  end_cforce = point_distance(0, 0, end_cforce_x, end_cforce_y);
}

start_force = start_jforce + start_cforce;
end_force = end_jforce + end_cforce;

if (start_force &gt; material_strength &amp;&amp; end_force &gt; material_strength) {
  instance_destroy();
} else if (start_force &gt; hinge_strength) {
  physics_joint_delete(start_joint);
  start_joint = -1;
} else if (end_force &gt; hinge_strength) {
  physics_joint_delete(end_joint);
  end_joint = -1;
}

// If shaking intensely, lose health
if (start_force &gt; 8 || end_force &gt; 8) {
  if (!damaged) {
    alarm[1] = room_speed / 4;
    damaged = true;
    hp -= 1;
    
    if (hp &lt;= 0) {
      instance_destroy();
    }
  }
}

if (start_joint &amp;&amp; start_connector) {
  start_displacement = point_distance(start_connect.x, start_connect.y, anchor_with.x, anchor_with.y);
  if (start_displacement &gt; max_joint_displacement) {
    with(start_connect) {
      instance_destroy();
    }
    start_joint = -1;
    start_connector = -1;
  }
}

if (end_joint &amp;&amp; end_connector) {
  end_displacement = point_distance(end_connect.x, end_connect.y, end_anchor.x, end_anchor.y);
  if (end_displacement &gt; 5) {
    with(end_connect) {
      instance_destroy();
    }
    end_joint = -1;
    end_connector = -1;
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_ground">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision handler
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draw) {
draw_set_alpha(1);
draw_set_color(c_black);
draw_line_width(
    x - lengthdir_x(length/2, phy_rotation),
    y + lengthdir_y(length/2, phy_rotation),
    x - lengthdir_x(length/2, phy_rotation + 180),
    y + lengthdir_y(length/2, phy_rotation + 180),
    5);

if (o_controller.DEBUG) {
    draw_text( x + 16, y, "(" +
        string(start_force) +
        ")#(" +
        string(end_force) +
        ")" );
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
